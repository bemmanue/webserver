#include "Pages.hpp"

std::string getPageForStatus(Status status) {
	switch (status) {
		case MOVED_PERMANENTLY:
			return http_error_301_page;
		case FOUND:
			return http_error_302_page;
		case SEE_OTHER:
			return http_error_303_page;
		case NOT_MODIFIED:
			return http_error_304_page;
		case USE_PROXY:
			return http_error_305_page;
		case TEMPORARY_REDIRECT:
			return http_error_307_page;
		case PERMANENT_REDIRECT:
			return http_error_308_page;
		case BAD_REQUEST:
			return http_error_400_page;
		case UNAUTHORIZED:
			return http_error_401_page;
		case PAYMENT_REQUIRED:
			return http_error_402_page;
		case FORBIDDEN:
			return http_error_403_page;
		case NOT_FOUND:
			return http_error_404_page;
		case METHOD_NOT_ALLOWED:
			return http_error_405_page;
		case NOT_ACCEPTABLE:
			return http_error_406_page;
		case PROXY_AUTHENTICATION_REQUIRED:
			return http_error_407_page;
		case REQUEST_TIMEOUT:
			return http_error_408_page;
		case CONFLICT:
			return http_error_409_page;
		case GONE:
			return http_error_410_page;
		case LENGTH_REQUIRED:
			return http_error_411_page;
		case PRECONDITION_FAILED:
			return http_error_412_page;
		case PAYLOAD_TOO_LARGE:
			return http_error_413_page;
		case URI_TOO_LONG:
			return http_error_414_page;
		case UNSUPPORTED_MEDIA_TYPE:
			return http_error_415_page;
		case RANGE_NOT_SATISFIABLE:
			return http_error_416_page;
		case EXPECTATION_FAILED:
			return http_error_417_page;
		case IM_A_TEAPOT:
			return http_error_418_page;
		case AUTHENTICATION_TIMEOUT:
			return http_error_419_page;
		case MISDIRECTED_REQUEST:
			return http_error_421_page;
		case UNPROCESSABLE_ENTITY:
			return http_error_422_page;
		case LOCKED:
			return http_error_423_page;
		case FAILED_DEPENDENCY:
			return http_error_424_page;
		case TOO_EARLY:
			return http_error_425_page;
		case UPGRADE_REQUIRED:
			return http_error_426_page;
		case PRECONDITION_REQUIRED:
			return http_error_428_page;
		case TOO_MANY_REQUESTS:
			return http_error_429_page;
		case REQUEST_HEADER_FIELDS_TOO_LARGE:
			return http_error_431_page;
		case RETRY_WITH:
			return http_error_449_page;
		case UNAVAILABLE_FOR_LEGAL_REASONS:
			return http_error_451_page;
		case CLIENT_CLOSED_REQUEST:
			return http_error_451_page;
		case INTERNAL_SERVER_ERROR:
			return http_error_500_page;
		case NOT_IMPLEMENTED:
			return http_error_501_page;
		case BAD_GATEWAY:
			return http_error_502_page;
		case SERVICE_UNAVAILABLE:
			return http_error_503_page;
		case GATEWAY_TIMEOUT:
			return http_error_504_page;
		case HTTP_VERSION_NOT_SUPPORTED:
			return http_error_505_page;
		case VARIANT_ALSO_NEGOTIATES:
			return http_error_506_page;
		case INSUFFICIENT_STORAGE:
			return http_error_507_page;
		case LOOP_DETECTED:
			return http_error_508_page;
		case BANDWIDTH_LIMIT_EXCEEDED:
			return http_error_509_page;
		case NOT_EXTENDED:
			return http_error_510_page;
		case NETWORK_AUTHENTICATION_REQUIRED:
			return http_error_511_page;
		case UNKNOWN_ERROR:
			return http_error_520_page;
		case WEB_SERVER_IS_DOWN:
			return http_error_521_page;
		case CONNECTION_TIMED_OUT:
			return http_error_522_page;
		case ORIGIN_IS_UNREACHABLE:
			return http_error_523_page;
		case A_TIMEOUT_OCCURRED:
			return http_error_524_page;
		case SSL_HANDSHAKE_FAILED:
			return http_error_525_page;
		case INVALID_SSL_CERTIFICATE:
			return http_error_526_page;
		default:
			return "";
	}
}

